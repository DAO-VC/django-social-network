version: "3.7"

services:
  app:
    build: .
    ports:
      - "127.0.0.1:8000:8000"
    command: sh -c "poetry run python -u manage.py runserver 0.0.0.0:8000"
    depends_on:
      migration:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
    volumes:
      - media_data:/usr/src/app/media
    restart: unless-stopped


  migration:
    build:
      context: .
    environment:
      - DOCKER_DEFAULT_PLATFORM=${DOCKER_DEFAULT_PLATFORM}
    depends_on:
      postgres:
        condition: service_healthy
    #    entrypoint: poetry run python manage.py migrate
#    entrypoint: |
#      sh -c "poetry run python manage.py migrate &&
#      poetry run python manage.py loaddata fixtures/bussines.json &&
#      poetry run python manage.py loaddata fixtures/industries.json &&
#      poetry run python manage.py loaddata fixtures/regions.json &&
#      poetry run python manage.py loaddata fixtures/users.json &&
#      poetry run python manage.py loaddata fixtures/interests.json"
    entrypoint: |
      sh -c "poetry run python manage.py flush"
  postgres:
    image: postgres:15
    env_file:
      - .env
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB" ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
  redis:
    image: redis
    restart: always
    ports:
      - "6379:6379"

  worker:
    restart: always
    build: .
    depends_on:
      - redis
      - app
    command: [ "poetry", "run", "celery", "-A", "main", "worker" ]
    #    command: celery -A main worker -l info

  beat:
    restart: always
    build: .
    depends_on:
      - redis
      - app
      - worker
    command: [ "poetry", "run", "celery", "-A", "main", "beat", "-l","info" ]

  flower:
    restart: always
    build: .
#    ports:
#      - "5555:5555"
    ports:
      - "127.0.0.1:5555:5555"
    depends_on:
      - worker
      - redis
    command: [ "poetry", "run", "celery", "-A", "main" ,"flower"]
#    command: sh -c "poetry run celery -A main flower --url-prefix=/flowerdashboard"
  #    command: [ "celery", "-A", "main" ,"flower" ]
#--url_prefix=flower

  daphne:
    build: .
    working_dir: /usr/src/app
    ports:
      - "127.0.0.1:8001:8001"
#    command: [ "poetry", "run","daphne", "-u", "./daphne.sock",
#               "main.asgi:application" ]
    command: [ "poetry", "run","daphne", "-b", "0.0.0.0","-p","8001",
               "main.asgi:application" ]
    restart: always
    depends_on:
      - postgres
      - redis

volumes:
  postgres_data:
  media_data:
